{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/comic",
    "paths": {
        "//": {
            "get": {
                "tags": [
                    ""
                ],
                "description": "get Comic",
                "operationId": "ComicController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Comic"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    ""
                ],
                "description": "create Comic",
                "operationId": "ComicController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Comic content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Comic"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Comic"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "//{id}": {
            "get": {
                "tags": [
                    ""
                ],
                "description": "get Comic by id",
                "operationId": "ComicController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Comic"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    ""
                ],
                "description": "update the Comic",
                "operationId": "ComicController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Comic content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Comic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Comic"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    ""
                ],
                "description": "delete the Comic",
                "operationId": "ComicController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/chapter/": {
            "get": {
                "tags": [
                    "chapter"
                ],
                "description": "get Chapter",
                "operationId": "ChapterController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Chapter"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "chapter"
                ],
                "description": "create Chapter",
                "operationId": "ChapterController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Chapter content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Chapter"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Chapter"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/chapter/{id}": {
            "get": {
                "tags": [
                    "chapter"
                ],
                "description": "get Chapter by id",
                "operationId": "ChapterController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Chapter"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "chapter"
                ],
                "description": "update the Chapter",
                "operationId": "ChapterController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Chapter content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Chapter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Chapter"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "chapter"
                ],
                "description": "delete the Chapter",
                "operationId": "ChapterController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/chapter_group/": {
            "get": {
                "tags": [
                    "chapter_group"
                ],
                "description": "get ChapterGroup",
                "operationId": "ChapterGroupController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterGroup"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "chapter_group"
                ],
                "description": "create ChapterGroup",
                "operationId": "ChapterGroupController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ChapterGroup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChapterGroup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ChapterGroup"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/chapter_group/{id}": {
            "get": {
                "tags": [
                    "chapter_group"
                ],
                "description": "get ChapterGroup by id",
                "operationId": "ChapterGroupController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterGroup"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "chapter_group"
                ],
                "description": "update the ChapterGroup",
                "operationId": "ChapterGroupController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ChapterGroup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChapterGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterGroup"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "chapter_group"
                ],
                "description": "delete the ChapterGroup",
                "operationId": "ChapterGroupController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/chapter_language/": {
            "get": {
                "tags": [
                    "chapter_language"
                ],
                "description": "get ChapterLanguage",
                "operationId": "ChapterLanguageController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterLanguage"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "chapter_language"
                ],
                "description": "create ChapterLanguage",
                "operationId": "ChapterLanguageController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ChapterLanguage content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChapterLanguage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ChapterLanguage"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/chapter_language/{id}": {
            "get": {
                "tags": [
                    "chapter_language"
                ],
                "description": "get ChapterLanguage by id",
                "operationId": "ChapterLanguageController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterLanguage"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "chapter_language"
                ],
                "description": "update the ChapterLanguage",
                "operationId": "ChapterLanguageController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ChapterLanguage content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChapterLanguage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterLanguage"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "chapter_language"
                ],
                "description": "delete the ChapterLanguage",
                "operationId": "ChapterLanguageController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/chapter_user_contributions/": {
            "get": {
                "tags": [
                    "chapter_user_contributions"
                ],
                "description": "get ChapterUserContributions",
                "operationId": "ChapterUserContributionsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterUserContributions"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "chapter_user_contributions"
                ],
                "description": "create ChapterUserContributions",
                "operationId": "ChapterUserContributionsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ChapterUserContributions content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChapterUserContributions"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.ChapterUserContributions"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/chapter_user_contributions/{id}": {
            "get": {
                "tags": [
                    "chapter_user_contributions"
                ],
                "description": "get ChapterUserContributions by id",
                "operationId": "ChapterUserContributionsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterUserContributions"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "chapter_user_contributions"
                ],
                "description": "update the ChapterUserContributions",
                "operationId": "ChapterUserContributionsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for ChapterUserContributions content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ChapterUserContributions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.ChapterUserContributions"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "chapter_user_contributions"
                ],
                "description": "delete the ChapterUserContributions",
                "operationId": "ChapterUserContributionsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/groups/": {
            "get": {
                "tags": [
                    "groups"
                ],
                "description": "get Groups",
                "operationId": "GroupsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Groups"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "groups"
                ],
                "description": "create Groups",
                "operationId": "GroupsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Groups content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Groups"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Groups"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "description": "get Groups by id",
                "operationId": "GroupsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Groups"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "description": "update the Groups",
                "operationId": "GroupsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Groups content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Groups"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Groups"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "description": "delete the Groups",
                "operationId": "GroupsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/login/": {
            "get": {
                "tags": [
                    "login"
                ],
                "description": "get Login",
                "operationId": "LoginController.GetAll",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Login"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "login"
                ],
                "description": "create Login",
                "operationId": "LoginController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Login content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Login"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Login"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/login/{id}": {
            "get": {
                "tags": [
                    "login"
                ],
                "description": "get Login by id",
                "operationId": "LoginController.GetOne",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Login"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "login"
                ],
                "description": "update the Login",
                "operationId": "LoginController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Login content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Login"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "login"
                ],
                "description": "delete the Login",
                "operationId": "LoginController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/logout/": {
            "post": {
                "tags": [
                    "logout"
                ],
                "description": "Logout",
                "operationId": "LogoutController.Logout",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Logout content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Logout"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Logout"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/reports/": {
            "post": {
                "tags": [
                    "reports"
                ],
                "description": "create Signup",
                "operationId": "SignupController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Signup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Signup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Signup"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series/": {
            "get": {
                "tags": [
                    "series"
                ],
                "description": "get Series",
                "operationId": "SeriesController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "series"
                ],
                "description": "create Series",
                "operationId": "SeriesController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Series content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Series"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series/{id}": {
            "get": {
                "tags": [
                    "series"
                ],
                "description": "get Series by id",
                "operationId": "SeriesController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "series"
                ],
                "description": "update the Series",
                "operationId": "SeriesController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Series content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "series"
                ],
                "description": "delete the Series",
                "operationId": "SeriesController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/series_chapter/": {
            "get": {
                "tags": [
                    "series_chapter"
                ],
                "description": "get SeriesChapter",
                "operationId": "SeriesChapterController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapter"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "series_chapter"
                ],
                "description": "create SeriesChapter",
                "operationId": "SeriesChapterController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesChapter content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapter"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.SeriesChapter"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series_chapter/{id}": {
            "get": {
                "tags": [
                    "series_chapter"
                ],
                "description": "get SeriesChapter by id",
                "operationId": "SeriesChapterController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapter"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "series_chapter"
                ],
                "description": "update the SeriesChapter",
                "operationId": "SeriesChapterController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesChapter content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapter"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "series_chapter"
                ],
                "description": "delete the SeriesChapter",
                "operationId": "SeriesChapterController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/series_status/": {
            "get": {
                "tags": [
                    "series_status"
                ],
                "description": "get SeriesStatus",
                "operationId": "SeriesStatusController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesStatus"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "series_status"
                ],
                "description": "create SeriesStatus",
                "operationId": "SeriesStatusController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesStatus content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesStatus"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.SeriesStatus"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series_status/{id}": {
            "get": {
                "tags": [
                    "series_status"
                ],
                "description": "get SeriesStatus by id",
                "operationId": "SeriesStatusController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesStatus"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "series_status"
                ],
                "description": "update the SeriesStatus",
                "operationId": "SeriesStatusController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesStatus content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesStatus"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesStatus"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "series_status"
                ],
                "description": "delete the SeriesStatus",
                "operationId": "SeriesStatusController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/series_type/": {
            "get": {
                "tags": [
                    "series_type"
                ],
                "description": "get SeriesType",
                "operationId": "SeriesTypeController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesType"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "series_type"
                ],
                "description": "create SeriesType",
                "operationId": "SeriesTypeController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesType content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesType"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.SeriesType"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series_type/{id}": {
            "get": {
                "tags": [
                    "series_type"
                ],
                "description": "get SeriesType by id",
                "operationId": "SeriesTypeController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesType"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "series_type"
                ],
                "description": "update the SeriesType",
                "operationId": "SeriesTypeController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesType content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesType"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "series_type"
                ],
                "description": "delete the SeriesType",
                "operationId": "SeriesTypeController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/signup/": {
            "post": {
                "tags": [
                    "reports"
                ],
                "description": "create Signup",
                "operationId": "SignupController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Signup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/.Signup"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/.Signup"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tag/": {
            "get": {
                "tags": [
                    "tag"
                ],
                "description": "get Tag",
                "operationId": "TagController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "tag"
                ],
                "description": "create Tag",
                "operationId": "TagController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Tag content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Tag"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/tag/{id}": {
            "get": {
                "tags": [
                    "tag"
                ],
                "description": "get Tag by id",
                "operationId": "TagController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "tag"
                ],
                "description": "update the Tag",
                "operationId": "TagController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Tag content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tag"
                ],
                "description": "delete the Tag",
                "operationId": "TagController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/users/": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users",
                "operationId": "UsersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "users"
                ],
                "description": "create Users",
                "operationId": "UsersController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Users"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                    "users"
                ],
                "description": "get Users by id",
                "operationId": "UsersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "description": "update the Users",
                "operationId": "UsersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Users content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "description": "delete the Users",
                "operationId": "UsersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        ".Comic": {
            "type": "object"
        },
        ".Login": {
            "type": "object"
        },
        ".Logout": {
            "type": "object"
        },
        ".Search": {
            "type": "object"
        },
        ".Signup": {
            "type": "object"
        },
        "models.Chapter": {
            "title": "Chapter",
            "type": "object",
            "properties": {
                "ChapterNumber": {
                    "type": "string"
                },
                "Date": {
                    "type": "string",
                    "format": "string"
                },
                "Files": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Title": {
                    "type": "string"
                }
            }
        },
        "models.ChapterGroup": {
            "title": "ChapterGroup",
            "type": "object",
            "properties": {
                "GroupId": {
                    "$ref": "#/definitions/models.Groups"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.ChapterLanguage": {
            "title": "ChapterLanguage",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Language": {
                    "type": "string"
                }
            }
        },
        "models.ChapterUserContributions": {
            "title": "ChapterUserContributions",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserId": {
                    "$ref": "#/definitions/models.Users"
                }
            }
        },
        "models.Groups": {
            "title": "Groups",
            "type": "object",
            "properties": {
                "Delay": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Links": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "models.Series": {
            "title": "Series",
            "type": "object",
            "properties": {
                "AltName": {
                    "type": "string"
                },
                "Cover": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                }
            }
        },
        "models.SeriesChapter": {
            "title": "SeriesChapter",
            "type": "object",
            "properties": {
                "ChapterId": {
                    "$ref": "#/definitions/models.Chapter"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.SeriesStatus": {
            "title": "SeriesStatus",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Status": {
                    "type": "string"
                }
            }
        },
        "models.SeriesType": {
            "title": "SeriesType",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Type": {
                    "type": "string"
                }
            }
        },
        "models.Tag": {
            "title": "Tag",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Namespace": {
                    "type": "string"
                }
            }
        },
        "models.Users": {
            "title": "Users",
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Password": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "description": "ComicController operations for Comic\n"
        },
        {
            "name": "logout",
            "description": "LogoutController operations for Logout\n"
        },
        {
            "name": "login",
            "description": "LoginController operations for Login\n"
        },
        {
            "name": "signup",
            "description": "SignupController operations for Signup\n"
        },
        {
            "name": "reports",
            "description": "SignupController operations for Signup\n"
        },
        {
            "name": "series",
            "description": "SeriesController operations for Series\n"
        },
        {
            "name": "groups",
            "description": "GroupsController operations for Groups\n"
        },
        {
            "name": "chapter_language",
            "description": "ChapterLanguageController operations for ChapterLanguage\n"
        },
        {
            "name": "users",
            "description": "UsersController operations for Users\n"
        },
        {
            "name": "series_type",
            "description": "SeriesTypeController operations for SeriesType\n"
        },
        {
            "name": "chapter_user_contributions",
            "description": "ChapterUserContributionsController operations for ChapterUserContributions\n"
        },
        {
            "name": "chapter_group",
            "description": "ChapterGroupController operations for ChapterGroup\n"
        },
        {
            "name": "chapter",
            "description": "ChapterController operations for Chapter\n"
        },
        {
            "name": "series_chapter",
            "description": "SeriesChapterController operations for SeriesChapter\n"
        },
        {
            "name": "series_status",
            "description": "SeriesStatusController operations for SeriesStatus\n"
        },
        {
            "name": "tag",
            "description": "TagController operations for Tag\n"
        }
    ]
}