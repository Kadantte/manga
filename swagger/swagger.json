{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/auth",
    "paths": {
        "/groups_scanlation/": {
            "get": {
                "tags": [
                    "groups_scanlation"
                ],
                "description": "get GroupsScanlation",
                "operationId": "GroupsScanlationController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GroupsScanlation"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "groups_scanlation"
                ],
                "description": "create GroupsScanlation",
                "operationId": "GroupsScanlationController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GroupsScanlation content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GroupsScanlation"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.GroupsScanlation"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/groups_scanlation/{name}": {
            "get": {
                "tags": [
                    "groups_scanlation"
                ],
                "description": "get GroupsScanlation by name",
                "operationId": "GroupsScanlationController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GroupsScanlation"
                        }
                    },
                    "403": {
                        "description": ":name is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "groups_scanlation"
                ],
                "description": "update the GroupsScanlation",
                "operationId": "GroupsScanlationController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "The name you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GroupsScanlation content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GroupsScanlation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GroupsScanlation"
                        }
                    },
                    "403": {
                        "description": ":name is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups_scanlation"
                ],
                "description": "delete the GroupsScanlation",
                "operationId": "GroupsScanlationController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "name",
                        "description": "The name you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "name is empty"
                    }
                }
            }
        },
        "/languages/": {
            "get": {
                "tags": [
                    "languages"
                ],
                "description": "get Languages",
                "operationId": "LanguagesController.Get All",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Languages"
                            }
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "languages"
                ],
                "description": "create Languages",
                "operationId": "LanguagesController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Languages content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Languages"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Languages"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/languages/{id}": {
            "delete": {
                "tags": [
                    "languages"
                ],
                "description": "delete the Languages",
                "operationId": "LanguagesController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/login/": {
            "get": {
                "tags": [
                    "login"
                ],
                "description": "get Login",
                "operationId": "LoginController.GetAll",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "login"
                ],
                "description": "create Login",
                "operationId": "LoginController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Login content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/logout/": {
            "get": {
                "tags": [
                    "logout"
                ],
                "description": "Logout",
                "operationId": "LogoutController.Logout",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Logout content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/reports/": {
            "get": {
                "tags": [
                    "reports"
                ],
                "description": "create Signup",
                "operationId": "SignupController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Signup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            },
            "post": {
                "tags": [
                    "reports"
                ],
                "description": "create Signup",
                "operationId": "SignupController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Signup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series/": {
            "get": {
                "tags": [
                    "series"
                ],
                "description": "get Series",
                "operationId": "SeriesController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "series"
                ],
                "description": "create Series",
                "operationId": "SeriesController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Series content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Series"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series/{id}": {
            "get": {
                "tags": [
                    "series"
                ],
                "description": "get Series by id",
                "operationId": "SeriesController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "series"
                ],
                "description": "update the Series",
                "operationId": "SeriesController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Series content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Series"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "series"
                ],
                "description": "delete the Series",
                "operationId": "SeriesController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/series_chapters/": {
            "get": {
                "tags": [
                    "series_chapters"
                ],
                "description": "get SeriesChapters",
                "operationId": "SeriesChaptersController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapters"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "series_chapters"
                ],
                "description": "create SeriesChapters",
                "operationId": "SeriesChaptersController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesChapters content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapters"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.SeriesChapters"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/series_chapters/{id}": {
            "get": {
                "tags": [
                    "series_chapters"
                ],
                "description": "get SeriesChapters by id",
                "operationId": "SeriesChaptersController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapters"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "series_chapters"
                ],
                "description": "update the SeriesChapters",
                "operationId": "SeriesChaptersController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SeriesChapters content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapters"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SeriesChapters"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "series_chapters"
                ],
                "description": "delete the SeriesChapters",
                "operationId": "SeriesChaptersController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/signup/": {
            "get": {
                "tags": [
                    "reports"
                ],
                "description": "create Signup",
                "operationId": "SignupController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Signup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            },
            "post": {
                "tags": [
                    "reports"
                ],
                "description": "create Signup",
                "operationId": "SignupController.Create",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Signup content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Users"
                        }
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/statuses/": {
            "get": {
                "tags": [
                    "statuses"
                ],
                "description": "get Statuses",
                "operationId": "StatusesController.Get All",
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Statuses"
                            }
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        ".Rss": {
            "type": "object"
        },
        ".Upload": {
            "type": "object"
        },
        "models.GroupsScanlation": {
            "title": "GroupsScanlation",
            "type": "object",
            "properties": {
                "Description": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "ReleaseDelay": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Languages": {
            "title": "Languages",
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                }
            }
        },
        "models.Series": {
            "title": "Series",
            "type": "object",
            "properties": {
                "CoverImage": {
                    "type": "string"
                },
                "Description": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "SeriesAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SeriesAliases"
                    }
                },
                "SeriesTags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SeriesTags"
                    }
                },
                "Status": {
                    "$ref": "#/definitions/models.Statuses"
                },
                "TypeDemonym": {
                    "type": "string"
                },
                "TypeName": {
                    "type": "string"
                }
            }
        },
        "models.SeriesAliases": {
            "title": "SeriesAliases",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "SeriesId": {
                    "$ref": "#/definitions/models.Series"
                }
            }
        },
        "models.SeriesChapters": {
            "title": "SeriesChapters",
            "type": "object",
            "properties": {
                "ChapterLanguage": {
                    "$ref": "#/definitions/models.Languages"
                },
                "ChapterNumberAbsolute": {
                    "type": "string"
                },
                "ChapterNumberVolume": {
                    "type": "number",
                    "format": "double"
                },
                "ContributorId": {
                    "$ref": "#/definitions/models.Users"
                },
                "Hash": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "SeriesId": {
                    "$ref": "#/definitions/models.Series"
                },
                "TimeUploaded": {
                    "type": "string",
                    "format": "string"
                },
                "Title": {
                    "type": "string"
                },
                "VolumeNumber": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.SeriesStatus": {
            "title": "SeriesStatus",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Status": {
                    "type": "string"
                }
            }
        },
        "models.SeriesTags": {
            "title": "SeriesTags",
            "type": "object",
            "properties": {
                "SeriesId": {
                    "$ref": "#/definitions/models.Series"
                },
                "TagName": {
                    "type": "string"
                },
                "TagNamespace": {
                    "type": "string"
                }
            }
        },
        "models.Statuses": {
            "title": "Statuses",
            "type": "object",
            "properties": {
                "Name": {
                    "type": "string"
                }
            }
        },
        "models.Users": {
            "title": "Users",
            "type": "object",
            "properties": {
                "Email": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PasswordHash": {
                    "type": "string"
                },
                "Username": {
                    "type": "string"
                }
            }
        }
    },
    "tags": [
        {
            "name": "logout",
            "description": "LogoutController operations for Logout\n"
        },
        {
            "name": "login",
            "description": "LoginController operations for Login\n"
        },
        {
            "name": "signup",
            "description": "SignupController operations for Signup\n"
        },
        {
            "name": "reports",
            "description": "SignupController operations for Signup\n"
        },
        {
            "name": "statuses",
            "description": "StatusesController operations for Statuses\n"
        },
        {
            "name": "languages",
            "description": "LanguagesController operations for Languages\n"
        },
        {
            "name": "groups_scanlation",
            "description": "GroupsScanlationController operations for GroupsScanlation\n"
        },
        {
            "name": "series_chapters",
            "description": "SeriesChaptersController operations for SeriesChapters\n"
        },
        {
            "name": "series",
            "description": "SeriesController operations for Series\n"
        }
    ]
}